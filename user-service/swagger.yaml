openapi: 3.0.0
info:
  title: User Service API
  version: 1.0.0
  description: API documentation for the User Service

servers:
  - url: http://localhost:3000
    description: Local development server

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        user_id:
          type: string
          format: uuid
        username:
          type: string
        email:
          type: string
          format: email
        phone_number:
          type: string
        bio:
          type: string
        avatar_url:
          type: string
        cover_photo_url:
          type: string
        date_of_birth:
          type: string
          format: date
        gender:
          type: string
          enum: [male, female, other]
        country:
          type: string
        city:
          type: string
        is_verified:
          type: boolean
        is_chef:
          type: boolean
        followers_count:
          type: integer
        following_count:
          type: integer
        posts_count:
          type: integer
        total_likes:
          type: integer
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        last_login:
          type: string
          format: date-time
        status:
          type: string
          enum: [active, inactive, banned]

paths:
  /api/users:
    post:
      summary: Create a new user
      tags: [Users]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - email
                - password
              properties:
                username:
                  type: string
                email:
                  type: string
                  format: email
                password:
                  type: string
                phone_number:
                  type: string
                bio:
                  type: string
                date_of_birth:
                  type: string
                  format: date
                gender:
                  type: string
                  enum: [male, female, other]
                country:
                  type: string
                city:
                  type: string
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid input
        '409':
          description: User already exists

  /api/users/{userId}:
    get:
      summary: Get user by ID
      tags: [Users]
      security:
        - BearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: User found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found

    put:
      summary: Update user
      tags: [Users]
      security:
        - BearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                phone_number:
                  type: string
                bio:
                  type: string
                country:
                  type: string
                city:
                  type: string
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found

    delete:
      summary: Delete user
      tags: [Users]
      security:
        - BearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: User deleted successfully
        '404':
          description: User not found

  /api/users/{userId}/posts:
    get:
      summary: Get user's posts
      tags: [Users]
      security:
        - BearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: List of user's posts
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Post'

  /api/users/{userId}/followers:
    get:
      summary: Get user's followers
      tags: [Users]
      security:
        - BearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: List of user's followers
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'

  /api/users/{userId}/following:
    get:
      summary: Get users that the user is following
      tags: [Users]
      security:
        - BearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: List of users being followed
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User' 